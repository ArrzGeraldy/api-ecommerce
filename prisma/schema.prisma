// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  // directUrl = env("DIRECT_URL")
}

enum Role{
  user
  admin
  superadmin
}

enum StatusOrder{
  pending
  progress
  shipping
  completed
  canceled
}
enum PaymentStatus{
  pending
  settlement
  paid
  expired
  canceled
}

model User{
  id          Int     @id @default(autoincrement())
  email       String  @unique @db.VarChar(100)
  username   String  @db.VarChar(100)
  password    String
  role        Role    @default(user)
  token       String? 
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt

  is_blocked Boolean @default(false)
  deleted_at DateTime?

  cart_item CartItem[]
  address Address[]
  order Order[]

  @@map("users")
}

model Category {
  id         Int      @id @default(autoincrement())
  name       String   @db.VarChar(100)
  parent_id     Int?
  slug       String   @unique

  deleted_at DateTime? 
  is_active Boolean @default(true)
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  
  parent   Category? @relation("CategoryToCategory", fields: [parent_id], references: [id])
  children Category[] @relation("CategoryToCategory")
  products Product[]

  @@unique([name, parent_id])
  @@map("categories")
}

model Product{
  id String @id @default(uuid()) @db.VarChar(50)
  category_id Int
  name String
  total_sale Int @default(0)
  cost_price Int
  price Int
  discount Int?   
  img_url String  @db.VarChar(255)
  description String
  is_active Boolean @default(true)
  deleted_at DateTime?
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt @default(now())

  category Category @relation(fields: [category_id], references: [id])
  product_variants ProductVariant[]

  @@map("products")
}

model ProductVariant {
  id Int @id @default(autoincrement())
  product_id String
  name String @db.VarChar(100)
  price_diff Int
  stock Int
  updated_at  DateTime @updatedAt @default(now())
  is_active Boolean @default(true)
  deleted_at DateTime?

  product Product @relation(fields: [product_id],references: [id],onDelete: Cascade)
  cart_item CartItem[]
  order_item OrderItem[]
  @@map("product_variants")
}

model CartItem{
  id Int @id @default(autoincrement())
  user_id Int
  product_variant_id Int
  quantity Int
  created_at  DateTime @default(now())
  
  user User @relation(fields: [user_id],references: [id],onDelete: Cascade)
  product_variant ProductVariant @relation(fields: [product_variant_id],references: [id])
  
  @@map("cart_items")
}

model Address{
  id Int @id @default(autoincrement())
  user_id Int
  recipient_name String @db.VarChar(100)
  phone String @db.VarChar(20)
  province String @db.VarChar(100)
  city String @db.VarChar(100)
  postal_code String @db.VarChar(10)
  detail String?
  is_primary Boolean @default(false)
  deleted_at DateTime?
  created_at  DateTime @default(now())


  user User @relation(fields: [user_id],references: [id])
  @@map("addresses")
}

model Order{
  id String @id @db.VarChar(100) @default(uuid())
  user_id Int

  base_price Int
  final_price Int
  status StatusOrder @default(pending)
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt


  user User @relation(fields: [user_id],references: [id])
  shipping Shipping?
  payment Payment?
  order_items OrderItem[]

  @@map("orders")
}

model OrderItem{
  id Int @id @default(autoincrement())
  order_id String
  product_variant_id Int
  quantity Int
  amount Int
  
  created_at DateTime @default(now())

  order Order @relation(fields: [order_id],references: [id],onDelete: Cascade)
  product_variant ProductVariant @relation(fields: [product_variant_id],references: [id])

  @@map("order_items")
}

model Shipping{
  order_id String @unique
  shipping_courier String @db.VarChar(100)
  shipping_cost Int
  tracking_number String? @db.VarChar(100)

  recipient_name String @db.VarChar(100)
  phone String @db.VarChar(20)
  province String @db.VarChar(100)
  city String @db.VarChar(100)
  postal_code String @db.VarChar(10)
  detail String?


  order Order @relation(fields: [order_id],references: [id],onDelete: Cascade)

  @@map("shippings")
}

model Payment{
  id Int @id @default(autoincrement())
  order_id String @unique
  method String @db.VarChar(100)
  bank String @db.VarChar(50)
  va_number String? @db.VarChar(100)
  status PaymentStatus @default(pending)

  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt
  expiry_time DateTime?

  order Order @relation(fields: [order_id],references: [id],onDelete: Cascade)

  @@map("payments")
}